generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Party {
  id               Int     @id @default(autoincrement())
  name             String
  address          String?
  code             Int?
  contact          String?
  credit           Float?
  dlno             String?
  gst              String?
  state            String?
  type             String?
  shipping_address String?
  credit_period    String?

  pricingRules CustomerPricingRule[] @relation("PartyToPricingRules")
}

model Courier {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Item {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  hsn       Int?
  min       Int?
  rate      Float?
  tax       Float?
  vendor    String?
  mrp       Decimal? @db.Decimal(10, 2)
  // â”€â”€â”€ New stock columns â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  stockIn   Int?     @map("stock-IN")
  stockHold Int?     @map("stock-Hold")
  stockOut  Int?     @map("stock-Out")

  /// The database keeps this upâ€‘toâ€‘date. Mark @ignore so Prisma
  /// doesnâ€™t try to write to it.
  effectiveStock Int @map("effective_stock") @ignore

  productType  String?               @map("productType")
  pricingRules CustomerPricingRule[] @relation("ItemToPricingRules")
}

model inRegister {
  id         Int      @id @default(autoincrement())
  regNo      Int      @unique
  party      String?
  item       String?
  qty        Int
  department String?
  deptRef    String?
  remark     String?
  others     String?
  courier    String?
  complete   String?  @default("Open")
  date       DateTime
}

model saleEntry {
  id             Int      @id(map: "sale_entry_pkey") @default(autoincrement())
  date           DateTime @db.Date
  party_name     String   @db.VarChar(255)
  invoice_number String   @db.VarChar(100)
  item_name      String   @db.VarChar(255)
  quantity       Int
  sell_rate      Decimal  @db.Decimal(10, 2)
  profit         Decimal? @db.Decimal(10, 2)
}

model SalesByItem {
  id       Int      @id @default(autoincrement())
  date     DateTime @db.Timestamp(6)
  itemname String
  qty      Int

  @@map("salesbyitem")
}

model SaleData2425 {
  party_name   String?
  invoice_date DateTime? @db.Date
  invoice_no   String?
  item_name    String?
  quantity     Int?
  rate         Decimal?
  uid          String?
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  @@map("saledata2425")
}

model StockItem {
  id          Int     @id @default(autoincrement())
  uid         String  @unique
  name        String
  hsncode     String?
  buyingprice Float
  supplier    String?
  tax         Float?
  stock       Int

  // ðŸ”§ Missing relation added here
  productBatches ProductBatch[]

  // Existing relation to PermanentItem
  permanentItem PermanentItem? @relation("ItemToPermanent")

  @@map("stockitem")
}

model PermanentItem {
  id            Int     @id @default(autoincrement())
  uid           String  @unique
  name          String?
  reorder_level Int?
  product_note  String?
  supplier      String?
  udrl          String? // <-- newly added column

  // Full relation details only on this side
  stockItem StockItem @relation("ItemToPermanent", fields: [uid], references: [uid], onDelete: Cascade, onUpdate: Cascade)

  @@map("permanentitem")
}

model saleTempEntry {
  id        Int       @id @default(autoincrement())
  partyname String?
  invcdt    DateTime?
  itemName  String?
  disc      String?
  qty       Float?
  rate      Float?
  shpAdd    String?

  @@map("saleTempEntry")
}

model CustomerPricingRule {
  id             Int       @id @default(autoincrement())
  party_id       Int
  item_id        Int
  min_qty        Int?
  fixed_price    Decimal   @db.Decimal(10, 2)
  effective_from DateTime  @default(now()) @db.Date
  effective_to   DateTime? @db.Date

  // Relations
  item  Item  @relation("ItemToPricingRules", fields: [item_id], references: [id], onDelete: Cascade)
  party Party @relation("PartyToPricingRules", fields: [party_id], references: [id], onDelete: Cascade)

  @@unique([party_id, item_id, min_qty])
}

model ProductBatch {
  id          Int       @id @default(autoincrement())
  stockitemId Int
  batchNo     String    @map("batch_no")
  serialNo    String?   @map("serial_no")
  expiryDate  DateTime? @map("expiry_date")
  mfgDate     DateTime? @map("mfg_date")
  quantity    Int
  createdAt   DateTime  @default(now()) @map("created_at")

  // â”€â”€â”€ Relations â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  stockItem StockItem @relation(fields: [stockitemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // â”€â”€â”€ Indexes & Constraints â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  @@unique([stockitemId, serialNo]) // one serial per product
  @@unique([stockitemId, batchNo]) // one batch code per product
  @@index([expiryDate])
  @@index([serialNo])
  @@map("product_batch")
}

model PurchaseEntry {
  id                      Int      @id @default(autoincrement())
  date                    DateTime
  partyName               String   @db.VarChar(255)
  purchaseNumber          String   @db.VarChar(100)
  itemName                String   @db.VarChar(255)
  quantity                Int
  purchaseRate            Decimal  @db.Decimal(10, 2)
  /**
   * optional for batch crossâ€‘checks
   */
  purchaseReferenceNumber String?  @db.VarChar(100)

  /// ðŸ”Ž Composite index for quick lookâ€‘ups by party + invoice
  @@index([partyName, purchaseNumber])
}
